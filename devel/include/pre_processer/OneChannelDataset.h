// Generated by gencpp from file pre_processer/OneChannelDataset.msg
// DO NOT EDIT!


#ifndef PRE_PROCESSER_MESSAGE_ONECHANNELDATASET_H
#define PRE_PROCESSER_MESSAGE_ONECHANNELDATASET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pre_processer
{
template <class ContainerAllocator>
struct OneChannelDataset_
{
  typedef OneChannelDataset_<ContainerAllocator> Type;

  OneChannelDataset_()
    : size(0)
    , s_data()
    , mfcc()
    , zero(0.0)
    , energy(0.0)
    , mfccl2(0.0)
    , vad_state(0)  {
    }
  OneChannelDataset_(const ContainerAllocator& _alloc)
    : size(0)
    , s_data(_alloc)
    , mfcc(_alloc)
    , zero(0.0)
    , energy(0.0)
    , mfccl2(0.0)
    , vad_state(0)  {
  (void)_alloc;
    }



   typedef int32_t _size_type;
  _size_type size;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _s_data_type;
  _s_data_type s_data;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _mfcc_type;
  _mfcc_type mfcc;

   typedef double _zero_type;
  _zero_type zero;

   typedef double _energy_type;
  _energy_type energy;

   typedef double _mfccl2_type;
  _mfccl2_type mfccl2;

   typedef int32_t _vad_state_type;
  _vad_state_type vad_state;




  typedef boost::shared_ptr< ::pre_processer::OneChannelDataset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pre_processer::OneChannelDataset_<ContainerAllocator> const> ConstPtr;

}; // struct OneChannelDataset_

typedef ::pre_processer::OneChannelDataset_<std::allocator<void> > OneChannelDataset;

typedef boost::shared_ptr< ::pre_processer::OneChannelDataset > OneChannelDatasetPtr;
typedef boost::shared_ptr< ::pre_processer::OneChannelDataset const> OneChannelDatasetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pre_processer::OneChannelDataset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pre_processer::OneChannelDataset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pre_processer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pre_processer': ['/home/hntea/RobotWorkSpace/SpeechSystem/speech_system/src/pre_processer/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pre_processer::OneChannelDataset_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pre_processer::OneChannelDataset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pre_processer::OneChannelDataset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "121cf30206060e130908f4ec26d884b6";
  }

  static const char* value(const ::pre_processer::OneChannelDataset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x121cf30206060e13ULL;
  static const uint64_t static_value2 = 0x0908f4ec26d884b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pre_processer/OneChannelDataset";
  }

  static const char* value(const ::pre_processer::OneChannelDataset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 size\n\
float64[] s_data\n\
float64[] mfcc\n\
float64 zero\n\
float64 energy\n\
float64 mfccl2\n\
int32 vad_state\n\
";
  }

  static const char* value(const ::pre_processer::OneChannelDataset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.s_data);
      stream.next(m.mfcc);
      stream.next(m.zero);
      stream.next(m.energy);
      stream.next(m.mfccl2);
      stream.next(m.vad_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OneChannelDataset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pre_processer::OneChannelDataset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pre_processer::OneChannelDataset_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "s_data[]" << std::endl;
    for (size_t i = 0; i < v.s_data.size(); ++i)
    {
      s << indent << "  s_data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.s_data[i]);
    }
    s << indent << "mfcc[]" << std::endl;
    for (size_t i = 0; i < v.mfcc.size(); ++i)
    {
      s << indent << "  mfcc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mfcc[i]);
    }
    s << indent << "zero: ";
    Printer<double>::stream(s, indent + "  ", v.zero);
    s << indent << "energy: ";
    Printer<double>::stream(s, indent + "  ", v.energy);
    s << indent << "mfccl2: ";
    Printer<double>::stream(s, indent + "  ", v.mfccl2);
    s << indent << "vad_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vad_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRE_PROCESSER_MESSAGE_ONECHANNELDATASET_H
