# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pre_processer/OneChannelDataset.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OneChannelDataset(genpy.Message):
  _md5sum = "121cf30206060e130908f4ec26d884b6"
  _type = "pre_processer/OneChannelDataset"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 size
float64[] s_data
float64[] mfcc
float64 zero
float64 energy
float64 mfccl2
int32 vad_state
"""
  __slots__ = ['size','s_data','mfcc','zero','energy','mfccl2','vad_state']
  _slot_types = ['int32','float64[]','float64[]','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       size,s_data,mfcc,zero,energy,mfccl2,vad_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OneChannelDataset, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.size is None:
        self.size = 0
      if self.s_data is None:
        self.s_data = []
      if self.mfcc is None:
        self.mfcc = []
      if self.zero is None:
        self.zero = 0.
      if self.energy is None:
        self.energy = 0.
      if self.mfccl2 is None:
        self.mfccl2 = 0.
      if self.vad_state is None:
        self.vad_state = 0
    else:
      self.size = 0
      self.s_data = []
      self.mfcc = []
      self.zero = 0.
      self.energy = 0.
      self.mfccl2 = 0.
      self.vad_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.size))
      length = len(self.s_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.s_data))
      length = len(self.mfcc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.mfcc))
      _x = self
      buff.write(_struct_3di.pack(_x.zero, _x.energy, _x.mfccl2, _x.vad_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.size,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.s_data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.mfcc = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 28
      (_x.zero, _x.energy, _x.mfccl2, _x.vad_state,) = _struct_3di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.size))
      length = len(self.s_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.s_data.tostring())
      length = len(self.mfcc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.mfcc.tostring())
      _x = self
      buff.write(_struct_3di.pack(_x.zero, _x.energy, _x.mfccl2, _x.vad_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.size,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.s_data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.mfcc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 28
      (_x.zero, _x.energy, _x.mfccl2, _x.vad_state,) = _struct_3di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3di = struct.Struct("<3di")
